name: Code Scanning analysis

on:
  pull_request:
    branches:
      - main
      - develop
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - main
      - develop

jobs:
  check-application-codeql:
    name: Check application CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'java'

      - name: Build application
        run: mvn clean package -DskipTests=true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:java'

  run-tests:
    name: Run tests
    needs: check-application-codeql
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build and run tests
        run: mvn clean package

  sonarcloud-scan:
    name: SonarCloud scan
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ghmiyoshi_med-api

  docker-build:
    name: Docker build
    needs: sonarcloud-scan
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      output: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: gahideki/med-api:${{ steps.vars.outputs.sha_short }}

  deploy-develop:
    name: Deploy develop
    needs: docker-build
    runs-on: ubuntu-latest
    environment:
      name: dev
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Deploy
        shell: bash
        run: |
          echo "Successfully deploy develop version: ${{needs.docker-build.outputs.output}}"
  
  health-check-app:
    name: Health check application
    runs-on: ubuntu-latest
    needs: [ deploy-develop,deploy-prod ]
    if: always()
    steps:
      - uses: actions/checkout@v3
      - name: Deploy
        shell: bash
        run: echo "Call http://localhost:8080/health"

  response-ok:
    name: Response OK
    runs-on: ubuntu-latest
    needs: health-check-app
    if: always() && needs.health-check-app.result == 'success'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy
        shell: bash
        run: echo "Call http://localhost:8080/ping"

  deploy-prod:
    name: Deploy prod
    needs: docker-build
    runs-on: ubuntu-latest
    environment:
      name: prod
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy
        shell: bash
        run: |
          echo "Successfully deploy production version: ${{needs.docker-build.outputs.output}}"
